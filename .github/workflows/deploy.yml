name: Build & Deploy (no registry)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build image
        run: |
          docker build --no-cache -t ms-vue-app:latest .
          
      - name: Verify build contains changes
        run: |
          # Create a temporary container to check build output
          docker create --name temp-check ms-vue-app:latest || true
          docker cp temp-check:/app/dist ./temp-dist || echo "Could not extract dist"
          if [ -d "./temp-dist" ]; then
            echo "Checking for changes in built files..."
            echo "Files in dist/assets:"
            ls -la ./temp-dist/assets/*.js 2>/dev/null | head -5 || echo "No JS files found"
            echo ""
            echo "Searching for '6.5 Website Configuration'..."
            grep -r "6.5 Website Configuration" ./temp-dist/ 2>/dev/null | head -1 && echo "✅ Changes found in build!" || echo "❌ Changes NOT found in build!"
            echo ""
            echo "Searching for 'Website Configuration Submissions'..."
            grep -r "Website Configuration Submissions" ./temp-dist/ 2>/dev/null | head -1 && echo "✅ Section 6.5 found!" || echo "❌ Section 6.5 NOT found!"
            echo ""
            echo "Searching for 'MothModelsTermsOfServiceView'..."
            grep -r "MothModelsTermsOfServiceView" ./temp-dist/ 2>/dev/null | head -1 && echo "✅ Component found!" || echo "❌ Component NOT found!"
          else
            echo "❌ temp-dist directory not created"
          fi
          docker rm temp-check || true
          rm -rf ./temp-dist || true

      - name: Start ssh-agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      # (опційно) додай ключ хоста і прибери StrictHostKeyChecking=no у нижніх кроках
      # - name: Add server host key
      #   run: ssh-keyscan -p "${{ secrets.SSH_PORT || 22 }}" "${{ secrets.SSH_HOST }}" >> ~/.ssh/known_hosts

      - name: Remove old image on server
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
        run: |
          ssh -o StrictHostKeyChecking=no -p "${SSH_PORT:-22}" "$SSH_USER@$SSH_HOST" \
            "docker rmi ms-vue-app:latest || true"

      - name: Transfer image (gzip) and load on server
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
        run: |
          docker save ms-vue-app:latest | gzip -1 | \
            ssh -o StrictHostKeyChecking=no -p "${SSH_PORT:-22}" "$SSH_USER@$SSH_HOST" "gunzip | docker load"
          
          # Verify image was loaded
          ssh -o StrictHostKeyChecking=no -p "${SSH_PORT:-22}" "$SSH_USER@$SSH_HOST" \
            "docker images ms-vue-app:latest"

      - name: Restart container
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
        run: |
          ssh -o StrictHostKeyChecking=no -p "${SSH_PORT:-22}" "$SSH_USER@$SSH_HOST" << 'EOF'
            set -e
            # Stop and remove old container
            docker stop ms-vue-app || true
            docker rm -f ms-vue-app || true
            # Remove any dangling images
            docker image prune -f
            # Start new container with explicit image pull
            docker run -d --name ms-vue-app --restart unless-stopped -p 9100:9100 ms-vue-app:latest
            # Verify container is running
            docker ps | grep ms-vue-app
            # Show container image info
            docker inspect ms-vue-app --format='{{.Config.Image}}'
          EOF

      - name: Smoke check (HTTP 200 expected)
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
        run: |
          # невелика пауза, щоб контейнер піднявся
          sleep 2
          ssh -o StrictHostKeyChecking=no -p "${SSH_PORT:-22}" "$SSH_USER@$SSH_HOST" \
            "curl -sSf -I http://localhost:9100 >/dev/null && echo 'OK: app is up on :9100'"
